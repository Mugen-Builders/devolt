// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package integration

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

type CompletionStatus string

const (
	CompletionStatusUnprocessed                CompletionStatus = "UNPROCESSED"
	CompletionStatusAccepted                   CompletionStatus = "ACCEPTED"
	CompletionStatusRejected                   CompletionStatus = "REJECTED"
	CompletionStatusException                  CompletionStatus = "EXCEPTION"
	CompletionStatusMachineHalted              CompletionStatus = "MACHINE_HALTED"
	CompletionStatusCycleLimitExceeded         CompletionStatus = "CYCLE_LIMIT_EXCEEDED"
	CompletionStatusTimeLimitExceeded          CompletionStatus = "TIME_LIMIT_EXCEEDED"
	CompletionStatusPayloadLengthLimitExceeded CompletionStatus = "PAYLOAD_LENGTH_LIMIT_EXCEEDED"
)

// __getInputStatusInput is used internally by genqlient
type __getInputStatusInput struct {
	Index int `json:"index"`
}

// GetIndex returns __getInputStatusInput.Index, and is useful for accessing the field via an interface.
func (v *__getInputStatusInput) GetIndex() int { return v.Index }

// getInputStatusInput includes the requested fields of the GraphQL type Input.
// The GraphQL type's documentation follows.
//
// Request submitted to the application to advance its state
type getInputStatusInput struct {
	// Status of the input
	Status CompletionStatus `json:"status"`
}

// GetStatus returns getInputStatusInput.Status, and is useful for accessing the field via an interface.
func (v *getInputStatusInput) GetStatus() CompletionStatus { return v.Status }

// getInputStatusResponse is returned by getInputStatus on success.
type getInputStatusResponse struct {
	// Get input based on its identifier
	Input getInputStatusInput `json:"input"`
}

// GetInput returns getInputStatusResponse.Input, and is useful for accessing the field via an interface.
func (v *getInputStatusResponse) GetInput() getInputStatusInput { return v.Input }

// getNodeStateInputsInputConnection includes the requested fields of the GraphQL type InputConnection.
// The GraphQL type's documentation follows.
//
// Pagination result
type getNodeStateInputsInputConnection struct {
	// Pagination entries returned for the current page
	Edges []getNodeStateInputsInputConnectionEdgesInputEdge `json:"edges"`
}

// GetEdges returns getNodeStateInputsInputConnection.Edges, and is useful for accessing the field via an interface.
func (v *getNodeStateInputsInputConnection) GetEdges() []getNodeStateInputsInputConnectionEdgesInputEdge {
	return v.Edges
}

// getNodeStateInputsInputConnectionEdgesInputEdge includes the requested fields of the GraphQL type InputEdge.
// The GraphQL type's documentation follows.
//
// Pagination entry
type getNodeStateInputsInputConnectionEdgesInputEdge struct {
	// Node instance
	Node getNodeStateInputsInputConnectionEdgesInputEdgeNodeInput `json:"node"`
}

// GetNode returns getNodeStateInputsInputConnectionEdgesInputEdge.Node, and is useful for accessing the field via an interface.
func (v *getNodeStateInputsInputConnectionEdgesInputEdge) GetNode() getNodeStateInputsInputConnectionEdgesInputEdgeNodeInput {
	return v.Node
}

// getNodeStateInputsInputConnectionEdgesInputEdgeNodeInput includes the requested fields of the GraphQL type Input.
// The GraphQL type's documentation follows.
//
// Request submitted to the application to advance its state
type getNodeStateInputsInputConnectionEdgesInputEdgeNodeInput struct {
	// Input index starting from genesis
	Index int `json:"index"`
	// Status of the input
	Status CompletionStatus `json:"status"`
	// Address responsible for submitting the input
	MsgSender string `json:"msgSender"`
	// Timestamp associated with the input submission, as defined by the base layer's block in which it was recorded
	Timestamp string `json:"timestamp"`
	// Number of the base layer block in which the input was recorded
	BlockNumber string `json:"blockNumber"`
	// Input payload in Ethereum hex binary format, starting with '0x'
	Payload string `json:"payload"`
	// Get notices from this particular input with support for pagination
	Notices getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnection `json:"notices"`
	// Get vouchers from this particular input with support for pagination
	Vouchers getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnection `json:"vouchers"`
	// Get reports from this particular input with support for pagination
	Reports getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnection `json:"reports"`
}

// GetIndex returns getNodeStateInputsInputConnectionEdgesInputEdgeNodeInput.Index, and is useful for accessing the field via an interface.
func (v *getNodeStateInputsInputConnectionEdgesInputEdgeNodeInput) GetIndex() int { return v.Index }

// GetStatus returns getNodeStateInputsInputConnectionEdgesInputEdgeNodeInput.Status, and is useful for accessing the field via an interface.
func (v *getNodeStateInputsInputConnectionEdgesInputEdgeNodeInput) GetStatus() CompletionStatus {
	return v.Status
}

// GetMsgSender returns getNodeStateInputsInputConnectionEdgesInputEdgeNodeInput.MsgSender, and is useful for accessing the field via an interface.
func (v *getNodeStateInputsInputConnectionEdgesInputEdgeNodeInput) GetMsgSender() string {
	return v.MsgSender
}

// GetTimestamp returns getNodeStateInputsInputConnectionEdgesInputEdgeNodeInput.Timestamp, and is useful for accessing the field via an interface.
func (v *getNodeStateInputsInputConnectionEdgesInputEdgeNodeInput) GetTimestamp() string {
	return v.Timestamp
}

// GetBlockNumber returns getNodeStateInputsInputConnectionEdgesInputEdgeNodeInput.BlockNumber, and is useful for accessing the field via an interface.
func (v *getNodeStateInputsInputConnectionEdgesInputEdgeNodeInput) GetBlockNumber() string {
	return v.BlockNumber
}

// GetPayload returns getNodeStateInputsInputConnectionEdgesInputEdgeNodeInput.Payload, and is useful for accessing the field via an interface.
func (v *getNodeStateInputsInputConnectionEdgesInputEdgeNodeInput) GetPayload() string {
	return v.Payload
}

// GetNotices returns getNodeStateInputsInputConnectionEdgesInputEdgeNodeInput.Notices, and is useful for accessing the field via an interface.
func (v *getNodeStateInputsInputConnectionEdgesInputEdgeNodeInput) GetNotices() getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnection {
	return v.Notices
}

// GetVouchers returns getNodeStateInputsInputConnectionEdgesInputEdgeNodeInput.Vouchers, and is useful for accessing the field via an interface.
func (v *getNodeStateInputsInputConnectionEdgesInputEdgeNodeInput) GetVouchers() getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnection {
	return v.Vouchers
}

// GetReports returns getNodeStateInputsInputConnectionEdgesInputEdgeNodeInput.Reports, and is useful for accessing the field via an interface.
func (v *getNodeStateInputsInputConnectionEdgesInputEdgeNodeInput) GetReports() getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnection {
	return v.Reports
}

// getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnection includes the requested fields of the GraphQL type NoticeConnection.
// The GraphQL type's documentation follows.
//
// Pagination result
type getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnection struct {
	// Pagination entries returned for the current page
	Edges []getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdge `json:"edges"`
}

// GetEdges returns getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnection.Edges, and is useful for accessing the field via an interface.
func (v *getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnection) GetEdges() []getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdge {
	return v.Edges
}

// getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdge includes the requested fields of the GraphQL type NoticeEdge.
// The GraphQL type's documentation follows.
//
// Pagination entry
type getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdge struct {
	// Node instance
	Node getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice `json:"node"`
}

// GetNode returns getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdge.Node, and is useful for accessing the field via an interface.
func (v *getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdge) GetNode() getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice {
	return v.Node
}

// getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice includes the requested fields of the GraphQL type Notice.
// The GraphQL type's documentation follows.
//
// Informational statement that can be validated in the base layer blockchain
type getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice struct {
	// Notice index within the context of the input that produced it
	Index int `json:"index"`
	// Notice data as a payload in Ethereum hex binary format, starting with '0x'
	Payload string `json:"payload"`
}

// GetIndex returns getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice.Index, and is useful for accessing the field via an interface.
func (v *getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice) GetIndex() int {
	return v.Index
}

// GetPayload returns getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice.Payload, and is useful for accessing the field via an interface.
func (v *getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputNoticesNoticeConnectionEdgesNoticeEdgeNodeNotice) GetPayload() string {
	return v.Payload
}

// getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnection includes the requested fields of the GraphQL type ReportConnection.
// The GraphQL type's documentation follows.
//
// Pagination result
type getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnection struct {
	// Pagination entries returned for the current page
	Edges []getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnectionEdgesReportEdge `json:"edges"`
}

// GetEdges returns getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnection.Edges, and is useful for accessing the field via an interface.
func (v *getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnection) GetEdges() []getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnectionEdgesReportEdge {
	return v.Edges
}

// getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnectionEdgesReportEdge includes the requested fields of the GraphQL type ReportEdge.
// The GraphQL type's documentation follows.
//
// Pagination entry
type getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnectionEdgesReportEdge struct {
	// Node instance
	Node getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnectionEdgesReportEdgeNodeReport `json:"node"`
}

// GetNode returns getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnectionEdgesReportEdge.Node, and is useful for accessing the field via an interface.
func (v *getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnectionEdgesReportEdge) GetNode() getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnectionEdgesReportEdgeNodeReport {
	return v.Node
}

// getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnectionEdgesReportEdgeNodeReport includes the requested fields of the GraphQL type Report.
// The GraphQL type's documentation follows.
//
// Application log or diagnostic information
type getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnectionEdgesReportEdgeNodeReport struct {
	// Report index within the context of the input that produced it
	Index int `json:"index"`
	// Report data as a payload in Ethereum hex binary format, starting with '0x'
	Payload string `json:"payload"`
}

// GetIndex returns getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnectionEdgesReportEdgeNodeReport.Index, and is useful for accessing the field via an interface.
func (v *getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnectionEdgesReportEdgeNodeReport) GetIndex() int {
	return v.Index
}

// GetPayload returns getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnectionEdgesReportEdgeNodeReport.Payload, and is useful for accessing the field via an interface.
func (v *getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputReportsReportConnectionEdgesReportEdgeNodeReport) GetPayload() string {
	return v.Payload
}

// getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnection includes the requested fields of the GraphQL type VoucherConnection.
// The GraphQL type's documentation follows.
//
// Pagination result
type getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnection struct {
	// Pagination entries returned for the current page
	Edges []getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdge `json:"edges"`
}

// GetEdges returns getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnection.Edges, and is useful for accessing the field via an interface.
func (v *getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnection) GetEdges() []getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdge {
	return v.Edges
}

// getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdge includes the requested fields of the GraphQL type VoucherEdge.
// The GraphQL type's documentation follows.
//
// Pagination entry
type getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdge struct {
	// Node instance
	Node getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher `json:"node"`
}

// GetNode returns getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdge.Node, and is useful for accessing the field via an interface.
func (v *getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdge) GetNode() getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher {
	return v.Node
}

// getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher includes the requested fields of the GraphQL type Voucher.
// The GraphQL type's documentation follows.
//
// Representation of a transaction that can be carried out on the base layer blockchain, such as a transfer of assets
type getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher struct {
	// Voucher index within the context of the input that produced it
	Index int `json:"index"`
	// Transaction payload in Ethereum hex binary format, starting with '0x'
	Payload string `json:"payload"`
	// Transaction destination address in Ethereum hex binary format (20 bytes), starting with '0x'
	Destination string `json:"destination"`
}

// GetIndex returns getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher.Index, and is useful for accessing the field via an interface.
func (v *getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher) GetIndex() int {
	return v.Index
}

// GetPayload returns getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher.Payload, and is useful for accessing the field via an interface.
func (v *getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher) GetPayload() string {
	return v.Payload
}

// GetDestination returns getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher.Destination, and is useful for accessing the field via an interface.
func (v *getNodeStateInputsInputConnectionEdgesInputEdgeNodeInputVouchersVoucherConnectionEdgesVoucherEdgeNodeVoucher) GetDestination() string {
	return v.Destination
}

// getNodeStateResponse is returned by getNodeState on success.
type getNodeStateResponse struct {
	// Get inputs with support for pagination
	Inputs getNodeStateInputsInputConnection `json:"inputs"`
}

// GetInputs returns getNodeStateResponse.Inputs, and is useful for accessing the field via an interface.
func (v *getNodeStateResponse) GetInputs() getNodeStateInputsInputConnection { return v.Inputs }

// The query or mutation executed by getInputStatus.
const getInputStatus_Operation = `
query getInputStatus ($index: Int!) {
	input(index: $index) {
		status
	}
}
`

// Get the input status.
func getInputStatus(
	ctx context.Context,
	client graphql.Client,
	index int,
) (*getInputStatusResponse, error) {
	req := &graphql.Request{
		OpName: "getInputStatus",
		Query:  getInputStatus_Operation,
		Variables: &__getInputStatusInput{
			Index: index,
		},
	}
	var err error

	var data getInputStatusResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getNodeState.
const getNodeState_Operation = `
query getNodeState {
	inputs {
		edges {
			node {
				index
				status
				msgSender
				timestamp
				blockNumber
				payload
				notices {
					edges {
						node {
							index
							payload
						}
					}
				}
				vouchers {
					edges {
						node {
							index
							payload
							destination
						}
					}
				}
				reports {
					edges {
						node {
							index
							payload
						}
					}
				}
			}
		}
	}
}
`

// Get the whole node state.
func getNodeState(
	ctx context.Context,
	client graphql.Client,
) (*getNodeStateResponse, error) {
	req := &graphql.Request{
		OpName: "getNodeState",
		Query:  getNodeState_Operation,
	}
	var err error

	var data getNodeStateResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
